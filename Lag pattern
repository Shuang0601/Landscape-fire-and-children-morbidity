
library(dlnm) ; library(mvmeta) ; library(splines) ; library(tsModel)
library(mixmeta); library(ggplot2); library(gnm) ; library(lubridate)


data <- readRDS(r"(......\Hospitalization_include.rds)")

data_list <- split(data, data$LocIDLarge)

outcomes <- c("All",
                   "All_CVD","All_Resp","All_Infectious","All_Digestive",
                   "All_Diabetes","All_Cancer","All_Nervous","All_Renal")

lagday <- 14
df_lag <- 2
numCores <- 20
registerDoParallel(numCores)
t1 <- Sys.time()
airlagpar_eAsia_all <- foreach(i = seq_along(data_list), .packages = c("dlnm",'tidyverse','splines','mixmeta','lubridate','data.table')) %dopar% {
  
  dat_mid = data_list[[i]]
  dat_mid$time = 1:nrow(dat_mid)
  dat_mid$rhum_mvavg = frollmean(dat_mid$RH,8)
  
  arg.temp <- list(fun="ns",knots=quantile(dat_mid$tmean,c(10,75,90)/100,na.rm=T),
                 intercept=T)

  cb.temp <- crossbasis(dat_mid$tmean,lag=21, argvar=arg.temp,
                      arglag=list(knots=logknots(21,3)))
  
  dat_mid$dow = weekdays(dat_mid$date)
  
  df_time = round(nrow(dat_mid)/365.25)*7
  knots_mid = 10
  
  airlagpar_eAsia <- data.frame()
  for (outcome in outcomes) {
    if(outcome %in% names(dat_mid) &  mean(dat_mid[[outcome]]) >= 0.01){
      dat_mid$x = dat_mid[["fire_PM25"]]
      dat_mid$y = dat_mid[[outcome]] 
      knots_air = quantile(dat_mid$x,c(25,75)/100,na.rm = T)

      
      cb_air = crossbasis(dat_mid$x,lag = lagday, argvar = list(fun="lin"),
                          arglag = list(fun="ns",knots = logknots(lagday,df_lag)))
      

      formula_mid = as.formula(paste0('y ~ cb_air + dow + ns(time,df=',df_time,') + cb.temp +
                                         ns(rhum_mvavg,df=3)'))
      
      try_model = try(glm(formula_mid,data = dat_mid,family=quasipoisson))
      if (class(try_model)[1] =="try-error"){next}
      model =glm(formula_mid,data = dat_mid,family=quasipoisson)
      
      try_reduce = try(crossreduce(cb_air,model,cen= 0,by = 0.1,type = 'var',value = knots_mid))
      if (class(try_reduce)[1] =="try-error"){next}
      mid2 = crossreduce(cb_air,model,cen= 0,by = 0.1,type = 'var',value = knots_mid)
      
      

      ncoef = length(coef(mid2))
      par = c(coef(mid2), vechMat(vcov(mid2)))
      names(par) = c(paste0("coef", seq(ncoef)),
                     paste0("vcov", seq(ncoef*(ncoef+1)/2)))
      airlagpar_eAsia =bind_rows(airlagpar_eAsia, data.frame(cityname = unique(dat_mid$LocIDLarge),
                                                             pollutant = "fire_PM25",outcome = outcome,maxlag = lagday,t(par)))
      
    }else{airlagpar_eAsia = bind_rows(airlagpar_eAsia, data.frame(cityname = unique(dat_mid$LocIDLarge),pollutant = "fire_PM25",
                                                                  outcome = outcome,maxlag = lagday))}
    
  }
  
  airlagpar_eAsia
}
stopImplicitCluster()
t2 <- Sys.time()
t2-t1
airlagpar_eAsia_all <- bind_rows(airlagpar_eAsia_all)
save(airlagpar_eAsia_all,file = 'resultP1_lag14.Rdata')

# Pool lag
lagday <- 14
df_lag <- 2
outcomes <- c("All",
                   "All_CVD","All_Resp","All_Infectious","All_Digestive",
                   "All_Diabetes","All_Cancer","All_Nervous","All_Renal")
airlagpar_eAsia_all$Country <- substr(airlagpar_eAsia_all$cityname,1,3)
t1 <- Sys.time()
result_lag_RR_combined <- data.frame()
for (outcome in outcomes) {
  
  mid1 = airlagpar_eAsia_all[airlagpar_eAsia_all$outcome == outcome,]
  mid1$Country <- substr(mid1$cityname,1,3)
  
  cityind_mid = mid1[,c('cityname','Country')]
  
  coef_mid = as.matrix(mid1[,grep("coef", names(mid1))])
  vcov_mid = as.matrix(mid1[,grep("vcov", names(mid1))])
  
  
  model_mid = mixmeta(coef_mid~1, vcov_mid, method="reml")
  
  
  xlag_mid = 0:lagday
  
  
  blag_mid = onebasis(xlag_mid, fun="ns", knots=logknots(lagday,df_lag),intercept = T)
  
  # PREDICT THE ASSOCIATION
  cp_mid = crosspred(blag_mid, coef=coef(model_mid), vcov=vcov(model_mid), model.link="log",
                     at=xlag_mid, cen= 0)
  
  data_mid = data.frame(pollutant = 'fire_PM25',
                        outcome = outcome,
                        lagday = xlag_mid,
                        RR = unname(cp_mid$allRRfit),
                        RRlow = unname(cp_mid$allRRlow),
                        RRhigh = unname(cp_mid$allRRhigh))
  
  result_lag_RR_combined = rbind(result_lag_RR_combined,data_mid)
  
  
  print(outcome)
}
t2 <- Sys.time()
t2-t1
save(result_lag_RR_combined,file = 'resultP2_lag14.Rdata')

load('resultP2_lag14.Rdata')

result_lag_RR_combined <- result_lag_RR_combined %>%
  mutate(outcome = recode(outcome, "All"="All-cause", "All_Resp"="Respiratory", "All_Infectious"="Infectious", "All_CVD"="Cardiovascular", "All_Nervous"="Neurological","All_Diabetes"="Diabetes", "All_Cancer"="Cancer", "All_Digestive"="Digestive", "All_Renal"="Renal"))

outcomes <- c("All-cause","Respiratory","Infectious","Cardiovascular","Neurological","Diabetes", "Cancer", "Digestive","Renal")

###visualize

library(ggplot2)
library(cowplot)
library(patchwork)

# Define the outcomes
outcomes <- c("All-cause","Respiratory","Infectious","Cardiovascular","Neurological","Diabetes", "Cancer", "Digestive","Renal")

# Function to create individual lag plots
create_lag_plot <- function(outcome, show_x_title = FALSE, show_y_title = FALSE) {
  result_lag_RR <- result_lag_RR_combined[result_lag_RR_combined$outcome == outcome, ]
  
  p <- ggplot(result_lag_RR, aes(x = lagday, y = RR)) +
    geom_errorbar(aes(ymin = RRlow, ymax = RRhigh), width = 0.1, color = "#D9534F") +
    geom_point(size = 1.5, color = "#D9534F") +
    geom_hline(yintercept = 1.000, color = "#9F8772", linetype = "dashed", size = 0.6) +
    ggtitle(outcome) +
    xlab(if (show_x_title) expression("Lag day") else NULL) +
    ylab(if (show_y_title) "Relative Risk (95% CI)" else NULL) +
    scale_x_continuous(breaks = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)) +
    theme_bw() +
    theme(
      text = element_text(size = 14, family = "serif"),
      plot.title = element_text(size = 15, face = "bold", family = "serif"),
      axis.text = element_text(size = 14, colour = "black", family = "serif"),
      axis.title.x = element_text(size = 14, colour = "black", family = "serif"),
      axis.title.y = element_text(size = 14, colour = "black", family = "serif"),
      legend.text = element_text(size = 14, colour = "black", family = "serif"),
      panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),    
        axis.line = element_line(color = "black"),
      plot.background = element_blank(),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      legend.position = "none"
    )
  
  return(p)
}


# Create the first plot
plot1 <- create_lag_plot(outcomes[1], show_x_title = TRUE, show_y_title = TRUE)

grid_plot1 <- (plot_spacer() ) /
             (plot1 ) /
             (plot_spacer() )


# Create the remaining plots
remaining_plots <- list(
  create_lag_plot(outcomes[2], show_y_title = TRUE),
  create_lag_plot(outcomes[3]),
  create_lag_plot(outcomes[4], show_y_title = TRUE),
  create_lag_plot(outcomes[5]),
  create_lag_plot(outcomes[6], show_y_title = TRUE),
  create_lag_plot(outcomes[7]),
  create_lag_plot(outcomes[8], show_x_title = TRUE, show_y_title = TRUE),
  create_lag_plot(outcomes[9], show_x_title = TRUE)
)


grid_plot <- (remaining_plots[[1]] | remaining_plots[[2]]) /
             (remaining_plots[[3]] | remaining_plots[[4]] ) /
             (remaining_plots[[5]] | remaining_plots[[6]])/
             (remaining_plots[[7]] |  remaining_plots[[8]])




# Combine plot1 and grid_plot side by side with adjusted widths
final_plot <- plot_grid(grid_plot1, grid_plot, ncol = 2, rel_widths = c(1, 1.5))

# Print the final combined plot
print(final_plot)

tiff("lagpattern.tiff", width = 14, height = 10, units = "in", res = 300)
final_plot
dev.off()

